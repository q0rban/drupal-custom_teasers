<?php
// $Id$

/**
 * @file
 * Defines a custome teaser content type for use with the custom_teasers module.
 */

/**
 * Define our reference types.
 */
define('CUSTOM_TEASERS_REF_REL', 'rel');
define('CUSTOM_TEASERS_REF_NID', 'nid');

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function custom_teasers_perm() {
  return array(
    'create custom teasers',
    'delete own custom teasers',
    'delete any custom teasers',
    'edit own custom teasers',
    'edit any custom teasers',
  );
}

/**
 * Implementation of hook_access().
 *
 * Node modules may implement node_access() to determine the operations
 * users may perform on nodes. This example uses a very common access pattern.
 */
function custom_teasers_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create custom teasers', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any custom teasers', $account) || (user_access('edit own custom teasers', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any custom teasers', $account) || (user_access('delete own custom teasers', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}


/**
 * Implementation of hook_theme().
 *
 * Returns information about every themable function defined by the module.
 */
function custom_teasers_views_theme() {
  $items = array();

  $items['custom_teasers_sort_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'custom_teasers.pages.inc',
  );
  $items['custom_teasers_table'] = array(
    'arguments' => array('nodes' => array()),
  );
  $items['custom_teasers_read_more_link'] = array(
    'arguments' => array('text' => NULL, 'path' => NULL),
  );

  return $items;
}


/**
 *
 * Arranges teaser nodes in a table.
 *
 * @ingroup themeable
 */
function theme_custom_teasers_table($nodes) {
  $rows = array();
  $path = drupal_get_path('module', 'custom_teasers') . '/images/';
  $features = custom_teasers_views_item_load_all_list();

  foreach ($nodes as $node) {
    $row = array();  
    $links = array();

    $links[] = array(
      'title' => theme('image', $path . 'text-editor.png', t('Edit')),
      'href' => 'node/'. $node->nid .'/edit',
      'html' => TRUE,
    );
    $links[] = array(
      'title' => theme('image', $path . 'edit-delete.png', t('Delete')),
      'href' => 'node/'. $node->nid .'/delete',
      'html' => TRUE,
    );

    // Render the hidden 'item id' field and the title of the item into the
    // same column of the row.
    $row[] = $node->title;
    $row[] = $features[$node->view_name];
    $row[] = theme('links', $links);
    $rows[] = $row;
  }

  // If there were no items found, note the fact so users don't get confused
  // by a completely empty table.
  if (count($rows) == 0) {
    $rows[] = array(array('data' => t('No teasers.'), 'colspan' => 3));
  }

  // Render a list of header titles, and our array of rows, into a table. Even
  // we've already rendered all of our items, we always call drupal_render()
  // on the form itself after we're done, so hidden security fields and other
  // elements (like buttons) will appear properly at the bottom of the form.
  $header = array(t('Title'), t('Feature'), t('Operations'));
  $output = '<div class="node-feature-nodes-table"><h3>'. t('Features') .'</h3>';
  $output .= theme('table', $header, $rows);
  $output .= '</div>';

  return $output;
}

/**
 *  Theme function to output a read more link.
 */
function theme_custom_teasers_read_more_link($text, $path) {
  return '<span class="read-more-link">'. l($text, $path) .'</span>';
}

/**
 * Implementation of hook_nodeapi().
 */
function custom_teasers_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      if ($node->feature) {
        drupal_goto('node/add/teaser/'. $node->nid);
      }
      break;

    case 'view':
      // Flag to see if this is a teaser view.
      $teaser = $a3;

      // If it's not a teaser, the user can edit the content, the node type is allowed, 
      // and there are actually feature nodes, THEN add the feature node table to the node content.
      if (!$teaser && user_access('edit any custom teasers') && in_array($node->type, variable_get('custom_teasers_views_nodereference_types', array('page'))) && count($teaser_nodes = custom_teasers_nodes_load($node->nid))) {
        $node->content['teaser'] = array(
          '#value' => theme('custom_teasers_nodes_table', $feature_nodes),
          '#weight' => 99,  // We want it to display at the bottom of the page.
        );
      }
      break;

    case 'delete':
      if (in_array($node->type, variable_get('custom_teasers_views_nodereference_types', array('page')))) {
        // @todo: add a while clause to select all custom teasers that link to this node and delete them completely. 
      }
      break;

    case 'delete revision':
      db_query('DELETE FROM {custom_teasers} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implementation of hook_node_info().
 */
function custom_teasers_node_info() {
  return array(
    'teaser' => array(
      'name' => t('Custom Teaser'),
      'module' => 'custom_teasers',
      'description' => t("Creates a Custom Teaser that links to existing content."),
      'has_title' => TRUE,
      'title_label' => t('Teaser Title'),
      'has_body' => TRUE,
      'body_label' => t('Teaser Body'),
    )
  );
}

/**
 * Implementation of hook_form().
 *
 * Now it's time to describe the form for collecting the information
 * specific to this node type. This hook requires us to return an array with
 * a sub array containing information for each element in the form.
 */
function custom_teasers_form(&$node) {
  // Add the js.
  drupal_add_js(drupal_get_path('module', 'custom_teasers') .'/custom_teasers.js', 'module');

  // Load the title and body information for this node type.
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  // Now we list the possible nodes to reference (IOW, link to).
  $references = _custom_teasers_potential_references();
  if (isset($node->reference_nid) && !isset($references['titles'][$node->reference_nid])) {
    $reference = node_load($node->reference_nid);
    $references[$node->reference_nid] = $reference->title;
  }

  $form['teaser_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Teaser options'),
  );

  if (module_exists('custom_teaser_views')) {
    $options = custom_teasers_views_load_all_list();

    // Add js to control the jquery.
    _custom_teasers_node_form_js();

    // We want to display the feature name selector first.
    $form['teaser_options']['view_name'] = array(
      '#title' => t('Teaser location'),
      '#type' => 'radios',
      '#default_value' => $node->view_name,
      '#options' => $options,
      '#required' => TRUE,
      '#weight' => -6,
      '#prefix' => '<div id="feature-name-wrap">',
      '#suffix' => '</div>',
    );
  }

  $form['teaser_options']['reference_type'] = array(
    '#type' => 'radios',
    '#default_value' => isset($node->reference_type) ? $node->reference_type : CUSTOM_TEASERS_REF_NID,
    '#required' => TRUE,
    '#title' => t('Destination'),
    '#options' => array(
      CUSTOM_TEASERS_REF_NID => t('Content'),
      CUSTOM_TEASERS_REF_REL => t('Path'),
    ),
    '#prefix' => theme('advanced_help_topic', 'custom_teasers', 'reference-type'),
  );

  $form['teaser_options']['reference_path'] = array(
    '#type' => 'textfield',
    '#default_value' => $node->reference_path,
    '#title' => t('Path/URL'),
    '#description' => t('Specify your path here.  Do not include a leading slash (ex. about-us instead of /about-us).'),
  );

  $form['teaser_options']['reference_nid'] = array(
    '#type' => 'select',
    '#title' => t('Content to link to'),
    '#default_value' => isset($node->reference_nid) ? $node->reference_nid : 0,
    '#options' => (array) $references,
  );
  if (empty($references)) {
    $form['teaser_options']['reference_nid']['#disabled'] = TRUE;
    $form['teaser_options']['reference_nid']['#description'] = t('You do not have any content.  Please create some content first to use the Existing content destination.');
  }

  // Check to see if we've added this from another node.
  if (is_numeric($nid = arg(3))) {
    $form['teaser_options']['reference_nid']['#type'] = $form['teaser_options']['reference_type']['#type'] = 'value';
    unset($form['teaser_options']['reference_path']);
    $form['teaser_options']['reference_nid']['#value'] = $nid;
    $form['teaser_options']['reference_type']['#value'] = CUSTOM_TEASERS_REF_NID;
  }

  return $form;
}

/**
 * Implementation of hook_validate().
 *
 * Errors should be signaled with form_set_error().
 */
function custom_teasers_validate(&$node) {
  if ($node->reference_type == CUSTOM_TEASERS_REF_NID && empty($node->reference_nid)) {
    form_set_error('reference_nid', t('You must select the content this teaser links to.'));
  }
  if ($node->reference_type == CUSTOM_TEASERS_REF_REL) {
    // Strip slashes from the beginning and end of the reference_path
    $node->reference_path = trim($node->reference_path, '\\/');
    // Check to make sure it's not empty.
    if (empty($node->reference_path)) {
      form_set_error('reference_path', t('You must specify a destination path.'));
    }
    // Check to make sure they didn't include a full path.
    if (strpos($node->reference_path, 'http') === 0) {
      form_set_error('reference_path', t('Please use a relative path. A "relative path" is a URL WITHOUT the domain name stuff in front of it (ex. about-us).'));
    }
  }
  if (module_exists('custom_teaser_views') && !$node->view_name) {
    form_set_error('view_name', t('You must select a feature location.'));
  }
}

/**
 * Implementation of hook_insert().
 */
function custom_teasers_insert($node) {
  _custom_teasers_reference_format($node);

  db_query("INSERT INTO {custom_teasers} (vid, nid, view_name, reference_nid, reference_type, reference_path) VALUES (%d, %d, '%s', %d, '%s', '%s')", $node->vid, $node->nid, $node->view_name, $node->reference_nid, $node->reference_type, $node->reference_path);
}

/**
 * Implementation of hook_update().
 */
function custom_teasers_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    feature_insert($node);
  }
  else {
    _custom_teasers_reference_format($node);

    db_query("UPDATE {custom_teasers} SET view_name = '%s', reference_nid = %d, reference_type = '%s', reference_path = '%s' WHERE vid = %d",  $node->view_name, $node->reference_nid, $node->reference_type, $node->reference_path, $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from out table.
 */
function custom_teasers_delete($node) {
  // Delete all revisions, by using the node's nid.
  db_query('DELETE FROM {custom_teasers} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function custom_teasers_load($node) {
  $node = db_fetch_object(db_query('SELECT view_name, reference_nid, reference_type, reference_path FROM {custom_teasers} WHERE vid = %d', $node->vid));
  return $node;
}

/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */
function custom_teasers_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  return $node;
}

/**
 * Implementation of hook_preprocess_node().
 */
function custom_teasers_preprocess_node(&$vars) {
  $node = $vars['node'];
  if ($node->type == 'teaser') {
    $vars['node_url'] = url($node->reference_path);
  }
}

/**
 * Implementation of hook_link_alter().
 */
function custom_teasers_link_alter(&$links, $node) {
  if ($node->type == 'teaser') {
    if ($links['node_read_more']) {
      $links['node_read_more']['href'] = $node->reference_path;
    }

    // Comments
    if ($node->reference_type == CUSTOM_TEASER_REF_NID) {
      if ($links['comment_add']) {
        $links['comment_add']['href'] = 'comment/reply/'. $node->reference_nid;
      }
      $all = comment_num_all($node->reference_nid);
      if ($all) {
        $links['comment_comments']['title'] = format_plural($all, '1 comment', '@count comments');
        $links['comment_comments']['href'] = "node/$node->reference_nid";
      }
    }
    else {
      unset($links['comment_add'], $links['comments_comment'], $links['comment_forbidden']);
    }
    // We'll just kill the new comments for now, to avoid having to load the referenced node.
    unset($links['comment_new_comments']);
  }
}

/**
 * Load all teaser nodes by reference nid.
 */
function custom_teasers_nodes_load($nid) {
  $nodes = array();

  $query = db_query("SELECT nid FROM {custom_teasers} WHERE reference_nid = %d", $nid);
  while ($nid = db_result($query)) {
    $nodes[] = node_load($nid);
  }

  return $nodes;
}

/**
 * Update a weight on a teaser.
 */
function custom_teasers_update_weight($nid, $weight) {
  db_query("UPDATE {custom_teasers} SET weight = %d WHERE nid = %d", $weight, $nid);
}

/**
 * Helper function to format the node reference based on type.
 */
function _custom_teasers_reference_format(&$node) {  
  switch($node->reference_type) {
    case CUSTOM_TEASERS_REF_REL:
      $node->reference_nid = 0;
      break;

    case CUSTOM_TEASERS_REF_NID:
      $node->reference_path = 'node/'. $node->reference_nid;
      break;
  }
}

/**
 * Returns referenceable nodes defined by content types.
 * Adapted from nodereference.module
 */
function _custom_teasers_potential_references($limit = 0) {
  $types = array();
  $where = array();
  $args = array();
  $references = array();

  // If the limit arg is not set, use the variable.
  $limit = ($limit) ? $limit : variable_get('custom_teasers_nodereference_limit', 0);

  foreach (variable_get('custom_teasers_nodereference_types', array('page')) as $type) {
    $types[] = "n.type = '%s'";
    $args[] = $type;
  }

  $where[] = implode(' OR ', $types);

  // If there's no content types, return an empty array before the query.
  if (!count($types)) {
    return array();
  }

  $where_clause = $where ? 'WHERE ('. implode(') AND (', $where) .')' : '';
  $sql = db_rewrite_sql("SELECT n.nid, n.title AS node_title, n.type AS node_type, n.created AS node_created FROM {node} n $where_clause ORDER BY n.created DESC, n.title, n.type");
  $result = $limit ? db_query_range($sql, $args, 0, $limit) : db_query($sql, $args);

  // Load the array
  while ($node = db_fetch_object($result)) {
    $references[$node->nid] = $node->node_title;
  }

  return $references;
}


/**
 * Add js to the teaser node form.
 */
function _custom_teasers_node_form_js() {
  $teasers = custom_teasers_views_load_all_list();
  $settings = array();

  foreach ($features as $name => $feature) {
    $feature += custom_teasers_default_data();
    if (is_array($feature['fields'])) {
      foreach($feature['fields'] as $field_name => $field) {
        $settings[$name][$field_name]['field_name'] = $field_name;
        if (is_array($field) && $field['options']['alter']['trim']) {
          $settings[$name][$field_name]['length'] = (int) $field['options']['alter']['max_length'];
        }
      }
    }
  }

  if (!empty($settings)) {
    drupal_add_js(drupal_get_path('module', 'custom_teasers_views') .'/custom_teasers_views.js', 'module');
    drupal_add_js(array('custom_teasers' => $settings), 'setting');
  }
}