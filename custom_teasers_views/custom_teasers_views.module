<?php
// $Id: custom_teasers_views.module,v 1.2 2009/06/17 15:35:48 q0rban Exp $

/**
 * @file
 * Custom Teasers Views module.
 */

/**
 * Implementation of hook_menu().
 */
function custom_teasers_views_menu() {
  $items = array();

  $items['admin/content/node/custom_teasers'] = array(
    'title' => 'Teasers',
    'description' => 'Manage teasers.',
    'page callback' => 'custom_teasers_views_node_sort_overview',
    'access arguments' => array('edit any custom teasers'),
    'file' => 'custom_teasers_views.pages.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
    'type' => MENU_LOCAL_TASK,
  );

  $i = 0;
  foreach(custom_teasers_views_load_all() as $view) {
    if ($view['sort'] != 'random') {
      $items['admin/content/node/custom_teasers/'. $view['name']] = array(
        'title' => $view['title'],
        'description' => 'Manage teasers.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('custom_teasers_views_node_sort_form', $view['name'], $view['sort']),
        'access arguments' => array('edit any custom teasers'),
        'file' => 'custom_teasers_views.pages.inc',
        'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
        'weight' => ++$i,
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  $items['admin/build/teaser_views'] = array(
    'title' => 'Teaser Views',
    'description' => 'Manage teaser views.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_overview_form'),
    'access arguments' => array('build custom teaser views'),
    'file' => 'custom_teasers_views.pages.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );

  $items['admin/build/teaser_views/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Add
  $items['admin/build/teaser_views/add'] = array(
    'title' => 'Add teaser view',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_form'),
    'access arguments' => array('build custom teaser views'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'custom_teasers_views.pages.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );

  // Edit
  $items['admin/build/teaser_views/edit/%custom_teasers_views'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_form', 4),
    'access arguments' => array('build custom teaser views'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'custom_teasers_views.pages.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );
  $items['admin/build/teaser_views/edit/%custom_teasers_views/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Delete
  $items['admin/build/teaser_views/delete/%custom_teasers_views'] = array(
    'title' => 'Delete teaser view',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_delete_confirm', 4),
    'access arguments' => array('build custom teaser views'),
    'type' => MENU_CALLBACK,
    'file' => 'custom_teasers_views.pages.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );

  // Fields
  $items['admin/build/teaser_views/edit/%custom_teasers_views/fields'] = array(
    'title' => 'Fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_fields_form', 4),
    'access callback' => 'custom_teasers_views_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'custom_teasers_views.field.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );
  $items['admin/build/teaser_views/edit/%custom_teasers_views/fields/add'] = array(
    'title' => 'Add Fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_fields_add_form', 4),
    'access callback' => 'custom_teasers_views_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'file' => 'custom_teasers_views.field.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );
  $items['admin/build/teaser_views/fields/%custom_teasers_views/options/%'] = array(
    'title' => 'Field Options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_field_options_form', 4, 6),
    'access arguments' => array('build custom teaser views'),
    'type' => MENU_CALLBACK,
    'file' => 'custom_teasers_views.field.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );
  $items['admin/build/teaser_views/fields/%custom_teasers_views/delete/%'] = array(
    'title' => 'Alter Fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_field_delete_confirm', 4, 6),
    'access arguments' => array('build custom teaser views'),
    'type' => MENU_CALLBACK,
    'file' => 'custom_teasers_views.field.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );

  // Style options
  $items['admin/build/teaser_views/edit/%custom_teasers_views/style_options'] = array(
    'title' => 'Style Options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_teasers_views_style_options_form', 4),
    'access callback' => 'custom_teasers_views_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'custom_teasers_views.pages.inc',
    'file path' => drupal_get_path('module', 'custom_teasers_views') .'/includes',
  );

  return $items;
}

/**
 * Access callback for editing a teaser view.
 */
function custom_teasers_views_access($view) {
  if ($view['default']) {
    return FALSE;
  }
  else {
    return user_access('build custom teaser views');
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function custom_teasers_views_perm() {
  return array('build custom teaser views');
}

/**
 * Implementation of hook_theme().
 *
 * Returns information about every themable function defined by the module.
 */
function custom_teasers_views_theme() {
  $items = array();
  $path = drupal_get_path('module', 'custom_teasers_views') .'/includes';

  $items['custom_teasers_views_overview_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'custom_teasers_views.pages.inc',
    'path' => $path,
  );
  $items['custom_teasers_views_fields_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'custom_teasers_views.pages.inc',
    'path' => $path,
  );
  $items['custom_teasers_views_node_sort_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'custom_teasers_views.pages.inc',
    'path' => $path,
  );

  return $items;
}

/**
 * Implementation of hook_form_#ID_alter().
 */
function custom_teasers_views_form_teaser_node_form_alter(&$form, $form_state) {
  $options = custom_teasers_views_load_all_list();

  // Add js to control the jquery.
  _custom_teasers_views_node_form_js();

  // We want to display the teaser name selector first.
  $form['teaser_options']['view_name'] = array(
    '#title' => t('Teaser location'),
    '#type' => 'radios',
    '#default_value' => $node->view_name,
    '#options' => $options,
    '#required' => TRUE,
    '#weight' => -6,
    '#prefix' => '<div id="teaser-name-wrap">',
    '#suffix' => '</div>',
  );

  if (count($options) == 1) {
    $keys = array_keys($options);
    $form['teaser_options']['view_name']['#default_value'] = $keys[0];
    $form['teaser_options']['view_name']['#disabled'] = TRUE;
  }
}

/**
 * Add js to the teaser node form.
 */
function _custom_teasers_views_node_form_js() {
  $views = custom_teasers_views_load_all();
  $settings = array();

  foreach ($views as $name => $view) {
    $view += custom_teasers_views_default_data();
    if (is_array($view['fields'])) {
      foreach($view['fields'] as $field_name => $field) {
        $settings[$name][$field_name]['field_name'] = $field_name;
        if (is_array($field) && $field['options']['alter']['trim']) {
          $settings[$name][$field_name]['length'] = (int) $field['options']['alter']['max_length'];
        }
      }
    }
  }

  if (!empty($settings)) {
    drupal_add_js(drupal_get_path('module', 'custom_teasers_views') .'/custom_teasers_views.js', 'module');
    drupal_add_js(array('custom_teasers_views' => $settings), 'setting');
  }
}

/**
 * Flushes all view caches.
 */
function custom_teasers_views_invalidate_cache() {
  views_flush_caches();
  views_invalidate_cache();
}


/**
 * Loader function for individual records.
 *
 * Because we use '%custom_teasers_views' as a wildcard in our hook_menu()
 * handler, this function will also be called automatically when we go to edit
 * or delete a record. Thanks, Menu API!.
 *
 * @param $name
 *   An int containing the ID of an item.
 * @return
 *   A single record in array format, or FALSE if none matched the incoming ID.
 */
function custom_teasers_views_load($name) {
  $teasers = custom_teasers_views_load_all();

  return isset($teasers[$name]) ? $teasers[$name] : FALSE;
}

/**
 * Public loader function for the full collection of records.
 *
 * In situations where the module's data rarely changes, or is being used
 * frequently (for example, loaded and processed on every page load), this
 * is a prime candidate for caching. See The Beginner's Guide to Caching at
 * http://www.lullabot.com/articles/a_beginners_guide_to_caching_data for more
 * details.
 *
 * This function assumes that results should be sorted by 'weight' -- if your
 * module doesn't store a weight column on its records, or if you need to sort
 * on some other property, this function's SQL should be updated as well.
 *
 * @return
 *   An array of all records, keyed by id.
 */
function custom_teasers_views_load_all() {
  init_theme();
  global $theme_info;
  static $records = array();

  if (empty($records)) {
    // Load module teaser views
    $records = custom_teasers_views_get_module_views();

    $sql = 'SELECT * FROM {custom_teasers_views}';
    $result = db_query($sql);

    while ($record = db_fetch_array($result)) {
      $record['style_options'] = unserialize($record['style_options']);

      // Use + to prefer the database record over the module's version.
      $records[$record['name']] = is_array($records[$record['name']]) ? $record + $records[$record['name']] : $record;

      // Unset the default flag in case this was loaded from the hook.
      unset($records[$record['name']]['default']);
    }

    // Load in the fields and theme settings 
    foreach ($records as $record) {
      $fields = custom_teasers_views_fields_load($record['name']);
      $theme_settings = $theme_info->info['teaser-view-settings'][$record['name']];

      if (!empty($fields)) {
        // Load in the fields.
        $records[$record['name']]['fields'] = $fields;
      }

      if (!empty($theme_settings)) {
        // Load in the theme settings.
        $records[$record['name']] = custom_teasers_views_union($records[$record['name']], $theme_settings);
      }
    }
  }

  return $records;
}

/**
 * Helper function to union two teaser view arrays
 */
function custom_teasers_views_union($view, $theme_settings) {
  if (is_array($theme_settings['fields'])) {
    foreach ($theme_settings['fields'] as $field_name => $field) {
      $view_field = $view['fields'][$field_name];
      if (isset($view['fields'][$field_name])) {
        if ($field) {
          $view['fields'][$field_name] = _custom_teasers_views_union_recursive($view_field, $field);
        }
        else {
          unset($view['fields'][$field_name]);
        }
      }
    }
  }
  unset($theme_settings['fields']);
  if (is_array($theme_settings)) {
    $view = _custom_teasers_views_union_recursive($view, $theme_settings);
  }

  return $view;
}

/**
 * Helper function to union two arrays recursively
 */
function _custom_teasers_views_union_recursive($array1, $array2) {
  foreach ($array2 as $key => $value) {
    if (is_array($value)) {
      $array1[$key] = _custom_teasers_views_union_recursive($array1[$key], $array2[$key]);
    }
    else {
      $array1[$key] = $value;
    }
  }
  return $array1;
}  

/**
 * Calls hook_
 */
function custom_teasers_views_get_module_views() {
  static $views = NULL;

  if (!isset($views)) {
    $views = array();

    // Load in the teaser views
    foreach (module_implements('custom_teasers_views_default_views') as $module) {
      $function = $module . '_custom_teasers_views_default_views';
      $return = $function();
      if (is_array($return)) {
        foreach($return as $view) {
          if (isset($views[$view['name']])) {
            // drupal_set_message();
          }
          else if (isset($view['name'])) {
            $view['default'] = TRUE;
            $views[$view['name']] = $view;
          }
        }
      }
    }
  }

  return $views;
}


/**
 * Loads all records in a simple name => title format for ease of use in forms.
 *
 * @return
 *  An array of teaser view titles, keyed by id.
 */
function custom_teasers_views_load_all_list() {
  $views = custom_teasers_views_load_all();

  foreach ($views as $view) {
    $views[$view['name']] = $view['title'];
  }

  return $views;
}

/**
 * Inserts a new item, or updates an existing one.
 *
 * Automatically inserts or updates, based on whether the item's unique ID has
 * been set yet. Because drupal_write_record() updates the item itself (adding
 * the unique ID after the database has been updated), we return the item
 * after saving it.
 *
 * This allows any calling function to check the id of the returned item and
 * act on the ID as needed (redirecting to a 'view' page after inserting, etc).
 *
 * @param $item
 *   A item to be saved. If $item['name'] is set, the item will be updated.
 *   Otherwise, a new item will be inserted into the database.
 * @return
 *   The saved item, with its ID set.
 */
function custom_teasers_views_save($item, $op = 'update') {
  if ($op == 'update') {
    drupal_write_record('custom_teasers_views', $item, 'name');
  }
  else {
    // Save the teaser view.
    drupal_write_record('custom_teasers_views', $item);

    // Save fields if there are any..
    if (is_array($item['fields'])) {
      foreach ($item['fields'] as $field) {
        if (isset($field['field_name'])) {
          $field['view_name'] = $item['name'];
          drupal_write_record('custom_teasers_views_field', $field);
        }
      }
    }
  }

  views_invalidate_cache();
  menu_rebuild();
  return $item;
}

/**
 * Deletes an item, given its unique name.
 *
 * @param $name
 *   An int containing the ID of an item.
 */
function custom_teasers_views_delete($name) {
  $sql = "DELETE FROM {custom_teasers_views} WHERE name = '%s'";
  db_query($sql, $name);

  $sql = "DELETE FROM {custom_teasers_views_field} WHERE view_name = '%s'";
  db_query($sql, $name);
  
  variable_set('menu_needs_rebuild', TRUE);
  views_invalidate_cache();
}

/**
 * Loads an array of fields for a specific teaser view.
 *
 * @param $view_name
 *   The unique id name of the teaser view.
 */
function custom_teasers_views_fields_load($view_name) {
  $fields = array();

  $result = db_query("SELECT * FROM {custom_teasers_views_field} WHERE view_name = '%s' ORDER BY weight ASC", $view_name);
  while ($field = db_fetch_array($result)) {
    $field['options'] = unserialize($field['options']);
    $fields[$field['field_name']] = $field;
  }

  return $fields;
}

/**
 * Deletes all fields relating to a teaser view.
 */
function custom_teasers_views_fields_delete($view_name) {
  db_query("DELETE FROM {custom_teasers_views_field} WHERE view_name = '%s'", $view_name);
}

/**
 * Implementation of hook_views_api.
 */
function custom_teasers_views_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'custom_teasers_views') . '/includes',
  );
}

/**
 * Build a teaser view in views formatting.
 */
function custom_teasers_views_build_view($view = array()) {
  module_load_include('inc', 'custom_teasers_views', '/includes/custom_teasers_views');
  return _custom_teasers_views_build_view($view);
}

function custom_teasers_views_default_data() {
  return array(
    'module' => 'custom_teasers_views',
    'path' => '<front>',
    'style_plugin' => 'default',
    'sort' => 'DESC',
    'items_per_page' => 5,
    'fields' => array (
      'title' => array(
        'field_name' => 'title',
        'title' => 'Teaser Title',
        'weight' => -1,
        'options' => array(
          'label' => '',
          'alter' => array(
            'alter_text' => 0,
            'text' => '',
            'make_link' => 1,
            'path' => '[path]',
            'alt' => '',
            'prefix' => '',
            'suffix' => '',
            'help' => '',
            'trim' => 1,
            'max_length' => '35',
            'word_boundary' => 0,
            'ellipsis' => 1,
            'html' => 0,
          ),
          'link_to_node' => 0,
          'exclude' => 0,
          'id' => 'title',
          'table' => 'node',
          'field' => 'title',
          'relationship' => 'none',
        ),
      ),
      'body' => array(
        'field_name' => 'body',
        'title' => 'Teaser Body',
        'weight' => 0,
        'options' => array(
          'label' => '',
          'alter' => array(
            'alter_text' => 0,
            'text' => '',
            'make_link' => 0,
            'path' => '',
            'alt' => '',
            'prefix' => '',
            'suffix' => '',
            'help' => '',
            'trim' => 1,
            'max_length' => '400',
            'word_boundary' => 1,
            'ellipsis' => 1,
            'html' => 1,
          ),
          'exclude' => 0,
          'id' => 'body',
          'table' => 'node_revisions',
          'field' => 'body',
          'relationship' => 'none',
        ),
      ),
    ),
  );
}